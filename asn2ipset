#!/usr/bin/env perl

# Tool for generate ipsets by AS Numbers

# See ftp://ftp.arin.net/info/asn.txt for full AS list

# ------------------------------------------------------------------------------

use strict;
use warnings;
use utf8;
use 5.010;

use Getopt::Long;
use Carp;

binmode(STDOUT, ":encoding(UTF-8)");

my $VERSION = '21.073';

my %config = (
    'prefix' => 'asn2ipset',
    'ipset' => '/usr/sbin/ipset',
    'bgpq3' => '/usr/bin/bgpq3',
    'ipv4_maxelem' => '16384',
    'ipv4_hashsize' => '1024',
    'ipv6_maxelem' => '1024',
    'ipv6_hashsize' => '1024',
    );

my %cmd = (
    'help' => undef,
    'version' => undef,
    'stdout' => undef,
    'direct' => undef,
    'prefix' => undef,
    );

GetOptions (
    'help' => \$cmd{'help'},
    'version' => \$cmd{'version'},
    'stdout=s' => \$cmd{'stdout'},
    'direct=s' => \$cmd{'direct'},
    'prefix=s' => \$cmd{'prefix'},
    ) or croak 'unknown option';

if (defined $cmd{'version'}) { say STDERR $VERSION }

my $IPV4_META_SET_NAME;
my $IPV6_META_SET_NAME;
my $PREFIX;

sub f_check_length {

    my ($str) = @_;
    my $length = length ($str);
    my $min = 1;
    my $max = 31;

    if ( $min <= $length and $length <= $max) {} else {
        croak "critical: prefix too long, ipset's names length must be between 1 and 31 characters";
    }

    return 0;
}


if (defined $cmd{'prefix'}) {
    if ($cmd{'prefix'} =~ m/^[a-zA-Z0-9_]+$/x ) {
        $IPV4_META_SET_NAME=$cmd{'prefix'} . '_ipv4_as_meta_set';
        $IPV6_META_SET_NAME=$cmd{'prefix'} . '_ipv6_as_meta_set';
        $PREFIX = $cmd{'prefix'};
    }
} else {
    $IPV4_META_SET_NAME=$config{'prefix'} . '_ipv4_as_meta_set';
    $IPV6_META_SET_NAME=$config{'prefix'} . '_ipv6_as_meta_set';
    $PREFIX = $config{'prefix'};
}

# Chech length for meta set name
f_check_length ($IPV4_META_SET_NAME);
f_check_length ($IPV6_META_SET_NAME);

my @asns;

sub f_sanitize {

    my ($raw) = @_;
    my @raw;
    my @sanitized;


    @raw = split m/,/x , $raw or croak "internal critical: unable parse AS numbers list";

    foreach my $entry (@raw) {
        if ($entry >= 1 and $entry <= 4294967296) {
            push (@sanitized, $entry);
        } else {
            carp "$entry : must be integer between 1 and 4294967296";
        }
    }

    return \@sanitized;
}

if (defined $cmd{'stdout'} and defined $cmd{'direct'}) {
    croak "--stdout and --direct flags are mutually exclusive!";
} elsif (defined $cmd{'stdout'}) {
    @asns = @{ f_sanitize ($cmd{'stdout'}) };
} elsif (defined $cmd{'direct'}) {
    @asns = @{ f_sanitize ($cmd{'direct'}) };
}

my $IPSET;
my $BGPQ3;
if (-X $config{'bgpq3'}) {
    $BGPQ3 = $config{'bgpq3'};
} else {
    croak "critical: bgpq3 tool not found! exit.";
}

if (defined $cmd{'direct'}) {
    if ($ENV{'USER'} eq 'root') {
        if (-X $config{'ipset'}) {
            $IPSET = $config{'ipset'};
        } else {
            croak "critical: ipset tool not found! exit.";
        }
    } else {
        croak "for --direct mode asn2ipset need root permissions!";
    }
}

sub f_help {

    my $help = q {usage: asn2ipset [--prefix <some>] < --direct | --stdout > ASN1,ASN2,ASN3 ...

  --help   - print this help

  --direct - apply changes directly, need root permissions

  --stdout - generate and print ipsets to stdout without direct changes

  --prefix - prefix for generated ipsets names, default - 'asn2ipset'

  examples:

           generate ipsets for some Google AS and print it to stdout:

           asn2ipset --stdout 15169,19527

           generate ipsets for Google AS whith prefix 'google' directly:

           asn2ipset --prefix google --direct 15169,19527};

    say $help;

    return 0;
}

if (defined $cmd{'help'}) {
    f_help;
}

sub create_meta_ipset {

    my ($mode) = @_;

    if ($mode eq 'direct') {

        # Test ipset meta list exists create it, if not
        system ("$IPSET list $IPV4_META_SET_NAME &> /dev/null");
        if ($? == 0) { } else {
            system("$IPSET create $IPV4_META_SET_NAME list:set");
        }

        system ("$IPSET list $IPV6_META_SET_NAME &> /dev/null");
        if ($? == 0) { } else {
            system("$IPSET create $IPV6_META_SET_NAME list:set");
        }

    } elsif ($mode eq 'stdout') {
        say "create $IPV4_META_SET_NAME list:set";
        say "create $IPV6_META_SET_NAME list:set";
    }

    return 0;
}

sub create_ipset {

    my ($mode, $name, $family) = @_;
    my ($hashsize, $maxelem);
    my $rvalue = -1;

    if ($family == 4) {
        $family = 'inet';
        $hashsize = $config{'ipv4_hashsize'};
        $maxelem = $config{'ipv4_maxelem'};
    } elsif ($family == 6) {
        $family = 'inet6';
        $hashsize = $config{'ipv6_hashsize'};
        $maxelem = $config{'ipv6_maxelem'};
    } else {
        croak "internal critical: unknown family: $family";
    }

    if ($mode eq 'direct') {
        system ("IPSET -q list $name &> /dev/null");
        if ($? == 0) { } else {
            system("$IPSET create $name hash:net family $family hashsize $hashsize maxelem $maxelem");
            $rvalue = $?;
        }
    } elsif ($mode eq 'stdout') {
        say "create $name hash:net family $family hashsize $hashsize maxelem $maxelem";
        $rvalue = 0;
    }

    return $rvalue;
}

sub lookup_subnets {

    my ($as, $family) = @_;
    my @subnets;


    if ($family == 4 or $family == 6) { } else {
        croak "internal critical: unknown family: $family";
    }

    my @out = `$BGPQ3 -$family AS$as | awk '{print \$5}'`;
    foreach my $entry (@out) {

        if ($entry =~ '^0\.0\.0\.0/0$' or
            $entry =~ '^::/0$') {

            carp "warning: empty ipv$family AS $as detected!, skipping ...";
            @subnets[0] = 'empty';
        }

        if ($entry =~ '^$') { } else {
            push (@subnets, $entry);
        }
    }

    return \@subnets;
}

sub add_to_ipset {

    my ($mode, $ipset) = @_;

    my @new_subnets = @{ $_[2] };
    my $rvalue = -1;

    foreach my $subnet (@new_subnets) {
        if ($mode eq 'direct') {
            system ("$IPSET -exist add $ipset $subnet");
            $rvalue = $?;
        } elsif ($mode eq 'stdout') {
            print "add $ipset $subnet";
            $rvalue = 0;
        }
    }

    return $rvalue;
}

sub add_to_meta_ipset {

    my ($mode, $ipset, $family) = @_;

    if ($family == 4) {
        if ($mode eq 'direct') {
            system("$IPSET -exist add $IPV4_META_SET_NAME $ipset");
        } elsif ($mode eq 'stdout') {
            say "add $IPV4_META_SET_NAME $ipset";
        }
    } elsif ($family == 6) {
        if ($mode eq 'direct') {
            system("$IPSET -exist add $IPV6_META_SET_NAME $ipset");
        } elsif ($mode eq 'stdout') {
            say "add $IPV6_META_SET_NAME $ipset";
        }
    } else {
        croak "internal critical: unknown family: $family";
    }

    return 0;
}

if (defined $cmd{'stdout'}) {
    create_meta_ipset ('stdout');
} elsif (defined $cmd{'direct'}) {
    create_meta_ipset ('direct');
}

# Check ipsets names
#
# 'F' - placeholder for family - '4' or '6'
foreach my $n (@asns) {
  my $ipset_name = $PREFIX . '_ipv' . 'F' . '_as_' . $n;
  f_check_length ($ipset_name);
}

foreach my $arg (@asns) {

    my $as = $arg;
    my @family = (4, 6);

    foreach my $fam (@family) {

        my @founded = @{ lookup_subnets ($as, $fam) };

        # Skip empty AS
        if ($founded[0] eq 'empty') { } else {

            my $ipset_name = $PREFIX . '_ipv' . $fam . '_as_' . $arg;

            # Print to stdout, if --stdout flag is defined
            if (defined $cmd{'stdout'}) {
                create_ipset ('stdout', $ipset_name, $fam);
                add_to_ipset ('stdout', $ipset_name, \@founded);
                add_to_meta_ipset ('stdout', $ipset_name, $fam);

            } elsif (defined $cmd{'direct'}) {

                # Generate and apply ipsets else

                carp "Create ipv$fam ipset for AS $as ...\n";
                create_ipset ('direct', $ipset_name, $fam);

                carp "Add ipv$fam subnets for AS $arg to ipset $ipset_name ...\n";
                add_to_ipset ('direct', $ipset_name, \@founded);

                carp "Add ipset $ipset_name to meta set ...\n";
                add_to_meta_ipset ('direct', $ipset_name, $fam);

            }
        }
    }
}
